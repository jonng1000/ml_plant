Folders
output4: results from ml workflow, 4 cores used, contains feature importance,
scores and pickled models
output4.zip: zipped output4
scores_time_plots: scores and time taken from all GO runs 

Files
class_labels_go.txt: list of GO class targets for ml workflow
cores_time_taken.txt: manually created info on time taken, for time
analysis
grps_tb_box.png, grps_tb_box_out.png: boxplots, produced by visualise_box_topbot.py,
_out suffix means that plot has outliers
score_grps_box.png, score_grps_box_out.png, combined_boxplot.png: boxplots, produced by 
visualise_boxplot_scores.py, _out suffix means that plot has outliers
high_hist.png, not_high_hist.png, combined_hist.png: histograms of all GO scores, produced by 
visualise_hist_scores.py
top_hist.png, bot_hist.png
high_GO_features.txt: high scoring GO features, F1 >= 0.7, for building
network
score04_GO_features.txt: same as high_GO_features.txt but with F1 >= 0.4

Scripts
create_go_targets.py: creates list of GO class targets to use in my ml
workflow
explore_scores.py: explore scores from ml workflow
stat_test: runs statistical test to see if there is a significant difference between
GO class sizes of differently scoring groups
visualise_box_topbot.py: visualises distributions of oob F1 scores of top and bottom
best scoring GO classes
visualise_boxplot_scores.py: visualises distributions of oob F1 scores of all GO classes,
those which scored well and those which did not.
visualise_hist_scores.py: visualises distributions of oob F1 scores of all GO classes, those which
scored well and those which did not.
visualise_hist_topbot.py: visualises distributions of oob F1 scores of top and bottom
best scoring GO classes
rf_go_v2.py: rf training using specified hps, used for my ml workflow
rf_go_rs.py: rf training using random search for hp selection, used for my ml workflow

Notes:
Workflow used in CN
1) class_labels_linux.txt - class labels eg GO:0043229
2) wrapper_go_v2.py - reformats class labels eg changes GO:0043229 to go_GO:0043229, and uses
that for downstream scripts
3) rem_specific_pcg.py: Removes parent and child terms, and reformats class label for pickling
dataset eg changes go_GO:0043229 to go_GO_0043229
4) rf_go_v2.py: Runs ml from class label passed from wrapper_go_v2.py, eg go_GO:0043229. Also
rename class label to a format for saving model's output e.g changes go_GO:0043229 to
go_GO_0043229
